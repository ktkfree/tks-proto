# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import info_pb2 as info__pb2


class ClusterInfoServiceStub(object):
    """ClusterInfoService is a service to manage cluster info document.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddClusterInfo = channel.unary_unary(
                '/tks_pb.ClusterInfoService/AddClusterInfo',
                request_serializer=info__pb2.AddClusterInfoRequest.SerializeToString,
                response_deserializer=common__pb2.IDResponse.FromString,
                )
        self.UpdateClusterConf = channel.unary_unary(
                '/tks_pb.ClusterInfoService/UpdateClusterConf',
                request_serializer=info__pb2.UpdateClusterConfRequest.SerializeToString,
                response_deserializer=common__pb2.SimpleResponse.FromString,
                )
        self.GetCluster = channel.unary_unary(
                '/tks_pb.ClusterInfoService/GetCluster',
                request_serializer=info__pb2.GetClusterRequest.SerializeToString,
                response_deserializer=info__pb2.GetClusterResponse.FromString,
                )
        self.GetClusters = channel.unary_unary(
                '/tks_pb.ClusterInfoService/GetClusters',
                request_serializer=info__pb2.GetClustersRequest.SerializeToString,
                response_deserializer=info__pb2.GetClustersResponse.FromString,
                )
        self.UpdateClusterStatus = channel.unary_unary(
                '/tks_pb.ClusterInfoService/UpdateClusterStatus',
                request_serializer=info__pb2.UpdateClusterStatusRequest.SerializeToString,
                response_deserializer=common__pb2.SimpleResponse.FromString,
                )


class ClusterInfoServiceServicer(object):
    """ClusterInfoService is a service to manage cluster info document.
    """

    def AddClusterInfo(self, request, context):
        """AddClusterInfo adds new cluster information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClusterConf(self, request, context):
        """UpdateClusterConf updates the cluster configuration information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCluster(self, request, context):
        """GetCluster gets cluster info for the id of the cluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusters(self, request, context):
        """GetClusters get every clusters on the mutlcluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClusterStatus(self, request, context):
        """UpdateClusterStatus update Status of the Cluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddClusterInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.AddClusterInfo,
                    request_deserializer=info__pb2.AddClusterInfoRequest.FromString,
                    response_serializer=common__pb2.IDResponse.SerializeToString,
            ),
            'UpdateClusterConf': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClusterConf,
                    request_deserializer=info__pb2.UpdateClusterConfRequest.FromString,
                    response_serializer=common__pb2.SimpleResponse.SerializeToString,
            ),
            'GetCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCluster,
                    request_deserializer=info__pb2.GetClusterRequest.FromString,
                    response_serializer=info__pb2.GetClusterResponse.SerializeToString,
            ),
            'GetClusters': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusters,
                    request_deserializer=info__pb2.GetClustersRequest.FromString,
                    response_serializer=info__pb2.GetClustersResponse.SerializeToString,
            ),
            'UpdateClusterStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClusterStatus,
                    request_deserializer=info__pb2.UpdateClusterStatusRequest.FromString,
                    response_serializer=common__pb2.SimpleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tks_pb.ClusterInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClusterInfoService(object):
    """ClusterInfoService is a service to manage cluster info document.
    """

    @staticmethod
    def AddClusterInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ClusterInfoService/AddClusterInfo',
            info__pb2.AddClusterInfoRequest.SerializeToString,
            common__pb2.IDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClusterConf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ClusterInfoService/UpdateClusterConf',
            info__pb2.UpdateClusterConfRequest.SerializeToString,
            common__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ClusterInfoService/GetCluster',
            info__pb2.GetClusterRequest.SerializeToString,
            info__pb2.GetClusterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClusters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ClusterInfoService/GetClusters',
            info__pb2.GetClustersRequest.SerializeToString,
            info__pb2.GetClustersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClusterStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ClusterInfoService/UpdateClusterStatus',
            info__pb2.UpdateClusterStatusRequest.SerializeToString,
            common__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CspInfoServiceStub(object):
    """CspInfoService is a service to manage CSP info document.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCSPInfo = channel.unary_unary(
                '/tks_pb.CspInfoService/CreateCSPInfo',
                request_serializer=info__pb2.CreateCSPInfoRequest.SerializeToString,
                response_deserializer=common__pb2.IDResponse.FromString,
                )
        self.GetCSPIDs = channel.unary_unary(
                '/tks_pb.CspInfoService/GetCSPIDs',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.IDsResponse.FromString,
                )
        self.GetCSPIDsByContractID = channel.unary_unary(
                '/tks_pb.CspInfoService/GetCSPIDsByContractID',
                request_serializer=common__pb2.IDRequest.SerializeToString,
                response_deserializer=common__pb2.IDsResponse.FromString,
                )
        self.UpdateCSPAuth = channel.unary_unary(
                '/tks_pb.CspInfoService/UpdateCSPAuth',
                request_serializer=info__pb2.UpdateCSPAuthRequest.SerializeToString,
                response_deserializer=common__pb2.SimpleResponse.FromString,
                )
        self.GetCSPAuth = channel.unary_unary(
                '/tks_pb.CspInfoService/GetCSPAuth',
                request_serializer=common__pb2.IDRequest.SerializeToString,
                response_deserializer=info__pb2.GetCSPAuthResponse.FromString,
                )


class CspInfoServiceServicer(object):
    """CspInfoService is a service to manage CSP info document.
    """

    def CreateCSPInfo(self, request, context):
        """CreateCSPInfo create new CSP Info for the contract id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCSPIDs(self, request, context):
        """GetCSPIDs returns all CSP ids.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCSPIDsByContractID(self, request, context):
        """GetCSPIDsByContractID returns the CSP ids by the contract id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCSPAuth(self, request, context):
        """UpdateCSPInfo updates an authentication config for CSP.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCSPAuth(self, request, context):
        """GetCSPAuth returns an authentication info by csp id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CspInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCSPInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCSPInfo,
                    request_deserializer=info__pb2.CreateCSPInfoRequest.FromString,
                    response_serializer=common__pb2.IDResponse.SerializeToString,
            ),
            'GetCSPIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCSPIDs,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=common__pb2.IDsResponse.SerializeToString,
            ),
            'GetCSPIDsByContractID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCSPIDsByContractID,
                    request_deserializer=common__pb2.IDRequest.FromString,
                    response_serializer=common__pb2.IDsResponse.SerializeToString,
            ),
            'UpdateCSPAuth': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCSPAuth,
                    request_deserializer=info__pb2.UpdateCSPAuthRequest.FromString,
                    response_serializer=common__pb2.SimpleResponse.SerializeToString,
            ),
            'GetCSPAuth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCSPAuth,
                    request_deserializer=common__pb2.IDRequest.FromString,
                    response_serializer=info__pb2.GetCSPAuthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tks_pb.CspInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CspInfoService(object):
    """CspInfoService is a service to manage CSP info document.
    """

    @staticmethod
    def CreateCSPInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.CspInfoService/CreateCSPInfo',
            info__pb2.CreateCSPInfoRequest.SerializeToString,
            common__pb2.IDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCSPIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.CspInfoService/GetCSPIDs',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            common__pb2.IDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCSPIDsByContractID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.CspInfoService/GetCSPIDsByContractID',
            common__pb2.IDRequest.SerializeToString,
            common__pb2.IDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCSPAuth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.CspInfoService/UpdateCSPAuth',
            info__pb2.UpdateCSPAuthRequest.SerializeToString,
            common__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCSPAuth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.CspInfoService/GetCSPAuth',
            common__pb2.IDRequest.SerializeToString,
            info__pb2.GetCSPAuthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AppInfoServiceStub(object):
    """AppInfoService is a service to manage Application info document.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAppGroup = channel.unary_unary(
                '/tks_pb.AppInfoService/CreateAppGroup',
                request_serializer=info__pb2.CreateAppGroupRequest.SerializeToString,
                response_deserializer=common__pb2.IDResponse.FromString,
                )
        self.GetAppGroupsByClusterID = channel.unary_unary(
                '/tks_pb.AppInfoService/GetAppGroupsByClusterID',
                request_serializer=common__pb2.IDRequest.SerializeToString,
                response_deserializer=info__pb2.GetAppGroupsResponse.FromString,
                )
        self.GetAppGroups = channel.unary_unary(
                '/tks_pb.AppInfoService/GetAppGroups',
                request_serializer=info__pb2.GetAppGroupsRequest.SerializeToString,
                response_deserializer=info__pb2.GetAppGroupsResponse.FromString,
                )
        self.GetAppGroup = channel.unary_unary(
                '/tks_pb.AppInfoService/GetAppGroup',
                request_serializer=info__pb2.GetAppGroupRequest.SerializeToString,
                response_deserializer=info__pb2.GetAppGroupResponse.FromString,
                )
        self.UpdateAppGroupStatus = channel.unary_unary(
                '/tks_pb.AppInfoService/UpdateAppGroupStatus',
                request_serializer=info__pb2.UpdateAppGroupStatusRequest.SerializeToString,
                response_deserializer=common__pb2.SimpleResponse.FromString,
                )
        self.DeleteAppGroup = channel.unary_unary(
                '/tks_pb.AppInfoService/DeleteAppGroup',
                request_serializer=info__pb2.DeleteAppGroupRequest.SerializeToString,
                response_deserializer=common__pb2.SimpleResponse.FromString,
                )
        self.GetAppsByAppGroupID = channel.unary_unary(
                '/tks_pb.AppInfoService/GetAppsByAppGroupID',
                request_serializer=common__pb2.IDRequest.SerializeToString,
                response_deserializer=info__pb2.GetAppsResponse.FromString,
                )
        self.GetApps = channel.unary_unary(
                '/tks_pb.AppInfoService/GetApps',
                request_serializer=info__pb2.GetAppsRequest.SerializeToString,
                response_deserializer=info__pb2.GetAppsResponse.FromString,
                )
        self.UpdateApp = channel.unary_unary(
                '/tks_pb.AppInfoService/UpdateApp',
                request_serializer=info__pb2.UpdateAppRequest.SerializeToString,
                response_deserializer=common__pb2.SimpleResponse.FromString,
                )


class AppInfoServiceServicer(object):
    """AppInfoService is a service to manage Application info document.
    """

    def CreateAppGroup(self, request, context):
        """CreateAppGroup creates a new application group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAppGroupsByClusterID(self, request, context):
        """GetAppGroupsByClusterID gets an array of app infos By the clusterID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAppGroups(self, request, context):
        """GetAppGroups gets an array of app infos by name & type in the cluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAppGroup(self, request, context):
        """GetAppGroup gets an application group by application group ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAppGroupStatus(self, request, context):
        """UpdateAppGroupStatus updates a status of an application group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAppGroup(self, request, context):
        """DeleteAppGroup deletes an app group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAppsByAppGroupID(self, request, context):
        """GetAppsByClusterID gets applications by application group id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetApps(self, request, context):
        """GetApps gets applications by application type and application id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateApp(self, request, context):
        """UpdateApp updates application data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AppInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAppGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAppGroup,
                    request_deserializer=info__pb2.CreateAppGroupRequest.FromString,
                    response_serializer=common__pb2.IDResponse.SerializeToString,
            ),
            'GetAppGroupsByClusterID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppGroupsByClusterID,
                    request_deserializer=common__pb2.IDRequest.FromString,
                    response_serializer=info__pb2.GetAppGroupsResponse.SerializeToString,
            ),
            'GetAppGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppGroups,
                    request_deserializer=info__pb2.GetAppGroupsRequest.FromString,
                    response_serializer=info__pb2.GetAppGroupsResponse.SerializeToString,
            ),
            'GetAppGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppGroup,
                    request_deserializer=info__pb2.GetAppGroupRequest.FromString,
                    response_serializer=info__pb2.GetAppGroupResponse.SerializeToString,
            ),
            'UpdateAppGroupStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAppGroupStatus,
                    request_deserializer=info__pb2.UpdateAppGroupStatusRequest.FromString,
                    response_serializer=common__pb2.SimpleResponse.SerializeToString,
            ),
            'DeleteAppGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAppGroup,
                    request_deserializer=info__pb2.DeleteAppGroupRequest.FromString,
                    response_serializer=common__pb2.SimpleResponse.SerializeToString,
            ),
            'GetAppsByAppGroupID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppsByAppGroupID,
                    request_deserializer=common__pb2.IDRequest.FromString,
                    response_serializer=info__pb2.GetAppsResponse.SerializeToString,
            ),
            'GetApps': grpc.unary_unary_rpc_method_handler(
                    servicer.GetApps,
                    request_deserializer=info__pb2.GetAppsRequest.FromString,
                    response_serializer=info__pb2.GetAppsResponse.SerializeToString,
            ),
            'UpdateApp': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateApp,
                    request_deserializer=info__pb2.UpdateAppRequest.FromString,
                    response_serializer=common__pb2.SimpleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tks_pb.AppInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AppInfoService(object):
    """AppInfoService is a service to manage Application info document.
    """

    @staticmethod
    def CreateAppGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.AppInfoService/CreateAppGroup',
            info__pb2.CreateAppGroupRequest.SerializeToString,
            common__pb2.IDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAppGroupsByClusterID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.AppInfoService/GetAppGroupsByClusterID',
            common__pb2.IDRequest.SerializeToString,
            info__pb2.GetAppGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAppGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.AppInfoService/GetAppGroups',
            info__pb2.GetAppGroupsRequest.SerializeToString,
            info__pb2.GetAppGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAppGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.AppInfoService/GetAppGroup',
            info__pb2.GetAppGroupRequest.SerializeToString,
            info__pb2.GetAppGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAppGroupStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.AppInfoService/UpdateAppGroupStatus',
            info__pb2.UpdateAppGroupStatusRequest.SerializeToString,
            common__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAppGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.AppInfoService/DeleteAppGroup',
            info__pb2.DeleteAppGroupRequest.SerializeToString,
            common__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAppsByAppGroupID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.AppInfoService/GetAppsByAppGroupID',
            common__pb2.IDRequest.SerializeToString,
            info__pb2.GetAppsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetApps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.AppInfoService/GetApps',
            info__pb2.GetAppsRequest.SerializeToString,
            info__pb2.GetAppsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.AppInfoService/UpdateApp',
            info__pb2.UpdateAppRequest.SerializeToString,
            common__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
