# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import contract_pb2 as contract__pb2


class ContractServiceStub(object):
    """ContractService is a service to manage contract's document.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateContract = channel.unary_unary(
                '/tks_pb.ContractService/CreateContract',
                request_serializer=contract__pb2.CreateContractRequest.SerializeToString,
                response_deserializer=contract__pb2.CreateContractResponse.FromString,
                )
        self.UpdateQuota = channel.unary_unary(
                '/tks_pb.ContractService/UpdateQuota',
                request_serializer=contract__pb2.UpdateQuotaRequest.SerializeToString,
                response_deserializer=contract__pb2.UpdateQuotaResponse.FromString,
                )
        self.UpdateServices = channel.unary_unary(
                '/tks_pb.ContractService/UpdateServices',
                request_serializer=contract__pb2.UpdateServicesRequest.SerializeToString,
                response_deserializer=contract__pb2.UpdateServicesResponse.FromString,
                )
        self.GetContract = channel.unary_unary(
                '/tks_pb.ContractService/GetContract',
                request_serializer=contract__pb2.GetContractRequest.SerializeToString,
                response_deserializer=contract__pb2.GetContractResponse.FromString,
                )
        self.GetDefaultContract = channel.unary_unary(
                '/tks_pb.ContractService/GetDefaultContract',
                request_serializer=common__pb2.IDRequest.SerializeToString,
                response_deserializer=contract__pb2.GetContractResponse.FromString,
                )
        self.GetContracts = channel.unary_unary(
                '/tks_pb.ContractService/GetContracts',
                request_serializer=contract__pb2.GetContractsRequest.SerializeToString,
                response_deserializer=contract__pb2.GetContractsResponse.FromString,
                )
        self.GetQuota = channel.unary_unary(
                '/tks_pb.ContractService/GetQuota',
                request_serializer=contract__pb2.GetQuotaRequest.SerializeToString,
                response_deserializer=contract__pb2.GetQuotaResponse.FromString,
                )
        self.GetAvailableServices = channel.unary_unary(
                '/tks_pb.ContractService/GetAvailableServices',
                request_serializer=contract__pb2.GetAvailableServicesRequest.SerializeToString,
                response_deserializer=contract__pb2.GetAvailableServicesResponse.FromString,
                )


class ContractServiceServicer(object):
    """ContractService is a service to manage contract's document.
    """

    def CreateContract(self, request, context):
        """CreateContract creates new contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateQuota(self, request, context):
        """UpdateQuota updates quota of the contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateServices(self, request, context):
        """UpdateServices updates list of available services of the contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContract(self, request, context):
        """GetContract returns a contract if exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDefaultContract(self, request, context):
        """GetDefaultContract returns a default contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContracts(self, request, context):
        """Getcontracts return a list of contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuota(self, request, context):
        """GetQuota returns a quota for the contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableServices(self, request, context):
        """GetAvailableServices returns list of available services for the contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContractServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateContract': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateContract,
                    request_deserializer=contract__pb2.CreateContractRequest.FromString,
                    response_serializer=contract__pb2.CreateContractResponse.SerializeToString,
            ),
            'UpdateQuota': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateQuota,
                    request_deserializer=contract__pb2.UpdateQuotaRequest.FromString,
                    response_serializer=contract__pb2.UpdateQuotaResponse.SerializeToString,
            ),
            'UpdateServices': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateServices,
                    request_deserializer=contract__pb2.UpdateServicesRequest.FromString,
                    response_serializer=contract__pb2.UpdateServicesResponse.SerializeToString,
            ),
            'GetContract': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContract,
                    request_deserializer=contract__pb2.GetContractRequest.FromString,
                    response_serializer=contract__pb2.GetContractResponse.SerializeToString,
            ),
            'GetDefaultContract': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDefaultContract,
                    request_deserializer=common__pb2.IDRequest.FromString,
                    response_serializer=contract__pb2.GetContractResponse.SerializeToString,
            ),
            'GetContracts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContracts,
                    request_deserializer=contract__pb2.GetContractsRequest.FromString,
                    response_serializer=contract__pb2.GetContractsResponse.SerializeToString,
            ),
            'GetQuota': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuota,
                    request_deserializer=contract__pb2.GetQuotaRequest.FromString,
                    response_serializer=contract__pb2.GetQuotaResponse.SerializeToString,
            ),
            'GetAvailableServices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableServices,
                    request_deserializer=contract__pb2.GetAvailableServicesRequest.FromString,
                    response_serializer=contract__pb2.GetAvailableServicesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tks_pb.ContractService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ContractService(object):
    """ContractService is a service to manage contract's document.
    """

    @staticmethod
    def CreateContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ContractService/CreateContract',
            contract__pb2.CreateContractRequest.SerializeToString,
            contract__pb2.CreateContractResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateQuota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ContractService/UpdateQuota',
            contract__pb2.UpdateQuotaRequest.SerializeToString,
            contract__pb2.UpdateQuotaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ContractService/UpdateServices',
            contract__pb2.UpdateServicesRequest.SerializeToString,
            contract__pb2.UpdateServicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ContractService/GetContract',
            contract__pb2.GetContractRequest.SerializeToString,
            contract__pb2.GetContractResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDefaultContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ContractService/GetDefaultContract',
            common__pb2.IDRequest.SerializeToString,
            contract__pb2.GetContractResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContracts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ContractService/GetContracts',
            contract__pb2.GetContractsRequest.SerializeToString,
            contract__pb2.GetContractsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ContractService/GetQuota',
            contract__pb2.GetQuotaRequest.SerializeToString,
            contract__pb2.GetQuotaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tks_pb.ContractService/GetAvailableServices',
            contract__pb2.GetAvailableServicesRequest.SerializeToString,
            contract__pb2.GetAvailableServicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
