// Code generated by MockGen. DO NOT EDIT.
// Source: pbgo/info_grpc.pb.go

// Package mock_pbgo is a generated GoMock package.
package mock_pbgo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pbgo "github.com/sktelecom/tks-proto/pbgo"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockInfoServiceClient is a mock of InfoServiceClient interface.
type MockInfoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfoServiceClientMockRecorder
}

// MockInfoServiceClientMockRecorder is the mock recorder for MockInfoServiceClient.
type MockInfoServiceClientMockRecorder struct {
	mock *MockInfoServiceClient
}

// NewMockInfoServiceClient creates a new mock instance.
func NewMockInfoServiceClient(ctrl *gomock.Controller) *MockInfoServiceClient {
	mock := &MockInfoServiceClient{ctrl: ctrl}
	mock.recorder = &MockInfoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoServiceClient) EXPECT() *MockInfoServiceClientMockRecorder {
	return m.recorder
}

// AddClusterInfo mocks base method.
func (m *MockInfoServiceClient) AddClusterInfo(ctx context.Context, in *pbgo.AddClusterInfoRequest, opts ...grpc.CallOption) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddClusterInfo", varargs...)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClusterInfo indicates an expected call of AddClusterInfo.
func (mr *MockInfoServiceClientMockRecorder) AddClusterInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterInfo", reflect.TypeOf((*MockInfoServiceClient)(nil).AddClusterInfo), varargs...)
}

// CreateCSPInfo mocks base method.
func (m *MockInfoServiceClient) CreateCSPInfo(ctx context.Context, in *pbgo.CreateCSPInfoRequest, opts ...grpc.CallOption) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCSPInfo", varargs...)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCSPInfo indicates an expected call of CreateCSPInfo.
func (mr *MockInfoServiceClientMockRecorder) CreateCSPInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSPInfo", reflect.TypeOf((*MockInfoServiceClient)(nil).CreateCSPInfo), varargs...)
}

// GetCSPAuth mocks base method.
func (m *MockInfoServiceClient) GetCSPAuth(ctx context.Context, in *pbgo.IDRequest, opts ...grpc.CallOption) (*pbgo.GetCSPAuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPAuth", varargs...)
	ret0, _ := ret[0].(*pbgo.GetCSPAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPAuth indicates an expected call of GetCSPAuth.
func (mr *MockInfoServiceClientMockRecorder) GetCSPAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPAuth", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCSPAuth), varargs...)
}

// GetCSPIDs mocks base method.
func (m *MockInfoServiceClient) GetCSPIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPIDs", varargs...)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDs indicates an expected call of GetCSPIDs.
func (mr *MockInfoServiceClientMockRecorder) GetCSPIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDs", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCSPIDs), varargs...)
}

// GetCSPIDsByContractID mocks base method.
func (m *MockInfoServiceClient) GetCSPIDsByContractID(ctx context.Context, in *pbgo.IDRequest, opts ...grpc.CallOption) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPIDsByContractID", varargs...)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDsByContractID indicates an expected call of GetCSPIDsByContractID.
func (mr *MockInfoServiceClientMockRecorder) GetCSPIDsByContractID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDsByContractID", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCSPIDsByContractID), varargs...)
}

// GetCluster mocks base method.
func (m *MockInfoServiceClient) GetCluster(ctx context.Context, in *pbgo.GetClusterRequest, opts ...grpc.CallOption) (*pbgo.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*pbgo.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInfoServiceClientMockRecorder) GetCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCluster), varargs...)
}

// GetClusters mocks base method.
func (m *MockInfoServiceClient) GetClusters(ctx context.Context, in *pbgo.GetClustersRequest, opts ...grpc.CallOption) (*pbgo.GetClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusters", varargs...)
	ret0, _ := ret[0].(*pbgo.GetClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters.
func (mr *MockInfoServiceClientMockRecorder) GetClusters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockInfoServiceClient)(nil).GetClusters), varargs...)
}

// UpdateCSPInfo mocks base method.
func (m *MockInfoServiceClient) UpdateCSPInfo(ctx context.Context, in *pbgo.UpdateCSPInfoRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCSPInfo", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCSPInfo indicates an expected call of UpdateCSPInfo.
func (mr *MockInfoServiceClientMockRecorder) UpdateCSPInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSPInfo", reflect.TypeOf((*MockInfoServiceClient)(nil).UpdateCSPInfo), varargs...)
}

// UpdateClusterConf mocks base method.
func (m *MockInfoServiceClient) UpdateClusterConf(ctx context.Context, in *pbgo.UpdateClusterConfRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterConf", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConf indicates an expected call of UpdateClusterConf.
func (mr *MockInfoServiceClientMockRecorder) UpdateClusterConf(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConf", reflect.TypeOf((*MockInfoServiceClient)(nil).UpdateClusterConf), varargs...)
}

// UpdateClusterStatus mocks base method.
func (m *MockInfoServiceClient) UpdateClusterStatus(ctx context.Context, in *pbgo.UpdateClusterStatusRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterStatus", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStatus indicates an expected call of UpdateClusterStatus.
func (mr *MockInfoServiceClientMockRecorder) UpdateClusterStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatus", reflect.TypeOf((*MockInfoServiceClient)(nil).UpdateClusterStatus), varargs...)
}

// MockInfoServiceServer is a mock of InfoServiceServer interface.
type MockInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInfoServiceServerMockRecorder
}

// MockInfoServiceServerMockRecorder is the mock recorder for MockInfoServiceServer.
type MockInfoServiceServerMockRecorder struct {
	mock *MockInfoServiceServer
}

// NewMockInfoServiceServer creates a new mock instance.
func NewMockInfoServiceServer(ctrl *gomock.Controller) *MockInfoServiceServer {
	mock := &MockInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoServiceServer) EXPECT() *MockInfoServiceServerMockRecorder {
	return m.recorder
}

// AddClusterInfo mocks base method.
func (m *MockInfoServiceServer) AddClusterInfo(arg0 context.Context, arg1 *pbgo.AddClusterInfoRequest) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClusterInfo", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClusterInfo indicates an expected call of AddClusterInfo.
func (mr *MockInfoServiceServerMockRecorder) AddClusterInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterInfo", reflect.TypeOf((*MockInfoServiceServer)(nil).AddClusterInfo), arg0, arg1)
}

// CreateCSPInfo mocks base method.
func (m *MockInfoServiceServer) CreateCSPInfo(arg0 context.Context, arg1 *pbgo.CreateCSPInfoRequest) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCSPInfo", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCSPInfo indicates an expected call of CreateCSPInfo.
func (mr *MockInfoServiceServerMockRecorder) CreateCSPInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSPInfo", reflect.TypeOf((*MockInfoServiceServer)(nil).CreateCSPInfo), arg0, arg1)
}

// GetCSPAuth mocks base method.
func (m *MockInfoServiceServer) GetCSPAuth(arg0 context.Context, arg1 *pbgo.IDRequest) (*pbgo.GetCSPAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPAuth", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetCSPAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPAuth indicates an expected call of GetCSPAuth.
func (mr *MockInfoServiceServerMockRecorder) GetCSPAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPAuth", reflect.TypeOf((*MockInfoServiceServer)(nil).GetCSPAuth), arg0, arg1)
}

// GetCSPIDs mocks base method.
func (m *MockInfoServiceServer) GetCSPIDs(arg0 context.Context, arg1 *emptypb.Empty) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPIDs", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDs indicates an expected call of GetCSPIDs.
func (mr *MockInfoServiceServerMockRecorder) GetCSPIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDs", reflect.TypeOf((*MockInfoServiceServer)(nil).GetCSPIDs), arg0, arg1)
}

// GetCSPIDsByContractID mocks base method.
func (m *MockInfoServiceServer) GetCSPIDsByContractID(arg0 context.Context, arg1 *pbgo.IDRequest) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPIDsByContractID", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDsByContractID indicates an expected call of GetCSPIDsByContractID.
func (mr *MockInfoServiceServerMockRecorder) GetCSPIDsByContractID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDsByContractID", reflect.TypeOf((*MockInfoServiceServer)(nil).GetCSPIDsByContractID), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockInfoServiceServer) GetCluster(arg0 context.Context, arg1 *pbgo.GetClusterRequest) (*pbgo.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInfoServiceServerMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInfoServiceServer)(nil).GetCluster), arg0, arg1)
}

// GetClusters mocks base method.
func (m *MockInfoServiceServer) GetClusters(arg0 context.Context, arg1 *pbgo.GetClustersRequest) (*pbgo.GetClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusters", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters.
func (mr *MockInfoServiceServerMockRecorder) GetClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockInfoServiceServer)(nil).GetClusters), arg0, arg1)
}

// UpdateCSPInfo mocks base method.
func (m *MockInfoServiceServer) UpdateCSPInfo(arg0 context.Context, arg1 *pbgo.UpdateCSPInfoRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCSPInfo", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCSPInfo indicates an expected call of UpdateCSPInfo.
func (mr *MockInfoServiceServerMockRecorder) UpdateCSPInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSPInfo", reflect.TypeOf((*MockInfoServiceServer)(nil).UpdateCSPInfo), arg0, arg1)
}

// UpdateClusterConf mocks base method.
func (m *MockInfoServiceServer) UpdateClusterConf(arg0 context.Context, arg1 *pbgo.UpdateClusterConfRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterConf", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConf indicates an expected call of UpdateClusterConf.
func (mr *MockInfoServiceServerMockRecorder) UpdateClusterConf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConf", reflect.TypeOf((*MockInfoServiceServer)(nil).UpdateClusterConf), arg0, arg1)
}

// UpdateClusterStatus mocks base method.
func (m *MockInfoServiceServer) UpdateClusterStatus(arg0 context.Context, arg1 *pbgo.UpdateClusterStatusRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterStatus", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStatus indicates an expected call of UpdateClusterStatus.
func (mr *MockInfoServiceServerMockRecorder) UpdateClusterStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatus", reflect.TypeOf((*MockInfoServiceServer)(nil).UpdateClusterStatus), arg0, arg1)
}

// mustEmbedUnimplementedInfoServiceServer mocks base method.
func (m *MockInfoServiceServer) mustEmbedUnimplementedInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInfoServiceServer")
}

// mustEmbedUnimplementedInfoServiceServer indicates an expected call of mustEmbedUnimplementedInfoServiceServer.
func (mr *MockInfoServiceServerMockRecorder) mustEmbedUnimplementedInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInfoServiceServer", reflect.TypeOf((*MockInfoServiceServer)(nil).mustEmbedUnimplementedInfoServiceServer))
}

// MockUnsafeInfoServiceServer is a mock of UnsafeInfoServiceServer interface.
type MockUnsafeInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInfoServiceServerMockRecorder
}

// MockUnsafeInfoServiceServerMockRecorder is the mock recorder for MockUnsafeInfoServiceServer.
type MockUnsafeInfoServiceServerMockRecorder struct {
	mock *MockUnsafeInfoServiceServer
}

// NewMockUnsafeInfoServiceServer creates a new mock instance.
func NewMockUnsafeInfoServiceServer(ctrl *gomock.Controller) *MockUnsafeInfoServiceServer {
	mock := &MockUnsafeInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInfoServiceServer) EXPECT() *MockUnsafeInfoServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInfoServiceServer mocks base method.
func (m *MockUnsafeInfoServiceServer) mustEmbedUnimplementedInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInfoServiceServer")
}

// mustEmbedUnimplementedInfoServiceServer indicates an expected call of mustEmbedUnimplementedInfoServiceServer.
func (mr *MockUnsafeInfoServiceServerMockRecorder) mustEmbedUnimplementedInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInfoServiceServer", reflect.TypeOf((*MockUnsafeInfoServiceServer)(nil).mustEmbedUnimplementedInfoServiceServer))
}

// MockAppInfoServiceClient is a mock of AppInfoServiceClient interface.
type MockAppInfoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppInfoServiceClientMockRecorder
}

// MockAppInfoServiceClientMockRecorder is the mock recorder for MockAppInfoServiceClient.
type MockAppInfoServiceClientMockRecorder struct {
	mock *MockAppInfoServiceClient
}

// NewMockAppInfoServiceClient creates a new mock instance.
func NewMockAppInfoServiceClient(ctrl *gomock.Controller) *MockAppInfoServiceClient {
	mock := &MockAppInfoServiceClient{ctrl: ctrl}
	mock.recorder = &MockAppInfoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppInfoServiceClient) EXPECT() *MockAppInfoServiceClientMockRecorder {
	return m.recorder
}

// CreateAppGroup mocks base method.
func (m *MockAppInfoServiceClient) CreateAppGroup(ctx context.Context, in *pbgo.CreateAppGroupRequest, opts ...grpc.CallOption) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppGroup", varargs...)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppGroup indicates an expected call of CreateAppGroup.
func (mr *MockAppInfoServiceClientMockRecorder) CreateAppGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppGroup", reflect.TypeOf((*MockAppInfoServiceClient)(nil).CreateAppGroup), varargs...)
}

// DeleteAppGroup mocks base method.
func (m *MockAppInfoServiceClient) DeleteAppGroup(ctx context.Context, in *pbgo.DeleteAppGroupRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppGroup", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppGroup indicates an expected call of DeleteAppGroup.
func (mr *MockAppInfoServiceClientMockRecorder) DeleteAppGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppGroup", reflect.TypeOf((*MockAppInfoServiceClient)(nil).DeleteAppGroup), varargs...)
}

// GetAppGroup mocks base method.
func (m *MockAppInfoServiceClient) GetAppGroup(ctx context.Context, in *pbgo.GetAppGroupRequest, opts ...grpc.CallOption) (*pbgo.GetAppGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppGroup", varargs...)
	ret0, _ := ret[0].(*pbgo.GetAppGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroup indicates an expected call of GetAppGroup.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroup", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppGroup), varargs...)
}

// GetAppGroups mocks base method.
func (m *MockAppInfoServiceClient) GetAppGroups(ctx context.Context, in *pbgo.GetAppGroupsRequest, opts ...grpc.CallOption) (*pbgo.GetAppGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppGroups", varargs...)
	ret0, _ := ret[0].(*pbgo.GetAppGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroups indicates an expected call of GetAppGroups.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroups", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppGroups), varargs...)
}

// GetAppGroupsByClusterID mocks base method.
func (m *MockAppInfoServiceClient) GetAppGroupsByClusterID(ctx context.Context, in *pbgo.IDRequest, opts ...grpc.CallOption) (*pbgo.GetAppGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppGroupsByClusterID", varargs...)
	ret0, _ := ret[0].(*pbgo.GetAppGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroupsByClusterID indicates an expected call of GetAppGroupsByClusterID.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppGroupsByClusterID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroupsByClusterID", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppGroupsByClusterID), varargs...)
}

// GetApps mocks base method.
func (m *MockAppInfoServiceClient) GetApps(ctx context.Context, in *pbgo.GetAppsRequest, opts ...grpc.CallOption) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApps", varargs...)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockAppInfoServiceClientMockRecorder) GetApps(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetApps), varargs...)
}

// GetAppsByAppGroupID mocks base method.
func (m *MockAppInfoServiceClient) GetAppsByAppGroupID(ctx context.Context, in *pbgo.IDRequest, opts ...grpc.CallOption) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppsByAppGroupID", varargs...)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsByAppGroupID indicates an expected call of GetAppsByAppGroupID.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppsByAppGroupID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsByAppGroupID", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppsByAppGroupID), varargs...)
}

// UpdateApp mocks base method.
func (m *MockAppInfoServiceClient) UpdateApp(ctx context.Context, in *pbgo.UpdateAppRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApp", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockAppInfoServiceClientMockRecorder) UpdateApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAppInfoServiceClient)(nil).UpdateApp), varargs...)
}

// UpdateAppGroupStatus mocks base method.
func (m *MockAppInfoServiceClient) UpdateAppGroupStatus(ctx context.Context, in *pbgo.UpdateAppGroupStatusRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppGroupStatus", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppGroupStatus indicates an expected call of UpdateAppGroupStatus.
func (mr *MockAppInfoServiceClientMockRecorder) UpdateAppGroupStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppGroupStatus", reflect.TypeOf((*MockAppInfoServiceClient)(nil).UpdateAppGroupStatus), varargs...)
}

// MockAppInfoServiceServer is a mock of AppInfoServiceServer interface.
type MockAppInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAppInfoServiceServerMockRecorder
}

// MockAppInfoServiceServerMockRecorder is the mock recorder for MockAppInfoServiceServer.
type MockAppInfoServiceServerMockRecorder struct {
	mock *MockAppInfoServiceServer
}

// NewMockAppInfoServiceServer creates a new mock instance.
func NewMockAppInfoServiceServer(ctrl *gomock.Controller) *MockAppInfoServiceServer {
	mock := &MockAppInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockAppInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppInfoServiceServer) EXPECT() *MockAppInfoServiceServerMockRecorder {
	return m.recorder
}

// CreateAppGroup mocks base method.
func (m *MockAppInfoServiceServer) CreateAppGroup(arg0 context.Context, arg1 *pbgo.CreateAppGroupRequest) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppGroup", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppGroup indicates an expected call of CreateAppGroup.
func (mr *MockAppInfoServiceServerMockRecorder) CreateAppGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppGroup", reflect.TypeOf((*MockAppInfoServiceServer)(nil).CreateAppGroup), arg0, arg1)
}

// DeleteAppGroup mocks base method.
func (m *MockAppInfoServiceServer) DeleteAppGroup(arg0 context.Context, arg1 *pbgo.DeleteAppGroupRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppGroup", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppGroup indicates an expected call of DeleteAppGroup.
func (mr *MockAppInfoServiceServerMockRecorder) DeleteAppGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppGroup", reflect.TypeOf((*MockAppInfoServiceServer)(nil).DeleteAppGroup), arg0, arg1)
}

// GetAppGroup mocks base method.
func (m *MockAppInfoServiceServer) GetAppGroup(arg0 context.Context, arg1 *pbgo.GetAppGroupRequest) (*pbgo.GetAppGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppGroup", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetAppGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroup indicates an expected call of GetAppGroup.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroup", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppGroup), arg0, arg1)
}

// GetAppGroups mocks base method.
func (m *MockAppInfoServiceServer) GetAppGroups(arg0 context.Context, arg1 *pbgo.GetAppGroupsRequest) (*pbgo.GetAppGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppGroups", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetAppGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroups indicates an expected call of GetAppGroups.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroups", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppGroups), arg0, arg1)
}

// GetAppGroupsByClusterID mocks base method.
func (m *MockAppInfoServiceServer) GetAppGroupsByClusterID(arg0 context.Context, arg1 *pbgo.IDRequest) (*pbgo.GetAppGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppGroupsByClusterID", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetAppGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroupsByClusterID indicates an expected call of GetAppGroupsByClusterID.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppGroupsByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroupsByClusterID", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppGroupsByClusterID), arg0, arg1)
}

// GetApps mocks base method.
func (m *MockAppInfoServiceServer) GetApps(arg0 context.Context, arg1 *pbgo.GetAppsRequest) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockAppInfoServiceServerMockRecorder) GetApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetApps), arg0, arg1)
}

// GetAppsByAppGroupID mocks base method.
func (m *MockAppInfoServiceServer) GetAppsByAppGroupID(arg0 context.Context, arg1 *pbgo.IDRequest) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppsByAppGroupID", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsByAppGroupID indicates an expected call of GetAppsByAppGroupID.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppsByAppGroupID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsByAppGroupID", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppsByAppGroupID), arg0, arg1)
}

// UpdateApp mocks base method.
func (m *MockAppInfoServiceServer) UpdateApp(arg0 context.Context, arg1 *pbgo.UpdateAppRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockAppInfoServiceServerMockRecorder) UpdateApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAppInfoServiceServer)(nil).UpdateApp), arg0, arg1)
}

// UpdateAppGroupStatus mocks base method.
func (m *MockAppInfoServiceServer) UpdateAppGroupStatus(arg0 context.Context, arg1 *pbgo.UpdateAppGroupStatusRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppGroupStatus", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppGroupStatus indicates an expected call of UpdateAppGroupStatus.
func (mr *MockAppInfoServiceServerMockRecorder) UpdateAppGroupStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppGroupStatus", reflect.TypeOf((*MockAppInfoServiceServer)(nil).UpdateAppGroupStatus), arg0, arg1)
}

// mustEmbedUnimplementedAppInfoServiceServer mocks base method.
func (m *MockAppInfoServiceServer) mustEmbedUnimplementedAppInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppInfoServiceServer")
}

// mustEmbedUnimplementedAppInfoServiceServer indicates an expected call of mustEmbedUnimplementedAppInfoServiceServer.
func (mr *MockAppInfoServiceServerMockRecorder) mustEmbedUnimplementedAppInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppInfoServiceServer", reflect.TypeOf((*MockAppInfoServiceServer)(nil).mustEmbedUnimplementedAppInfoServiceServer))
}

// MockUnsafeAppInfoServiceServer is a mock of UnsafeAppInfoServiceServer interface.
type MockUnsafeAppInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAppInfoServiceServerMockRecorder
}

// MockUnsafeAppInfoServiceServerMockRecorder is the mock recorder for MockUnsafeAppInfoServiceServer.
type MockUnsafeAppInfoServiceServerMockRecorder struct {
	mock *MockUnsafeAppInfoServiceServer
}

// NewMockUnsafeAppInfoServiceServer creates a new mock instance.
func NewMockUnsafeAppInfoServiceServer(ctrl *gomock.Controller) *MockUnsafeAppInfoServiceServer {
	mock := &MockUnsafeAppInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAppInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAppInfoServiceServer) EXPECT() *MockUnsafeAppInfoServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAppInfoServiceServer mocks base method.
func (m *MockUnsafeAppInfoServiceServer) mustEmbedUnimplementedAppInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppInfoServiceServer")
}

// mustEmbedUnimplementedAppInfoServiceServer indicates an expected call of mustEmbedUnimplementedAppInfoServiceServer.
func (mr *MockUnsafeAppInfoServiceServerMockRecorder) mustEmbedUnimplementedAppInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppInfoServiceServer", reflect.TypeOf((*MockUnsafeAppInfoServiceServer)(nil).mustEmbedUnimplementedAppInfoServiceServer))
}
