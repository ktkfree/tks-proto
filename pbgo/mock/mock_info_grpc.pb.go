// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sktelecom/tks-proto/pbgo (interfaces: InfoServiceClient)

// Package mock_pbgo is a generated GoMock package.
package mock_pbgo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pbgo "github.com/sktelecom/tks-proto/pbgo"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockInfoServiceClient is a mock of InfoServiceClient interface.
type MockInfoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfoServiceClientMockRecorder
}

// MockInfoServiceClientMockRecorder is the mock recorder for MockInfoServiceClient.
type MockInfoServiceClientMockRecorder struct {
	mock *MockInfoServiceClient
}

// NewMockInfoServiceClient creates a new mock instance.
func NewMockInfoServiceClient(ctrl *gomock.Controller) *MockInfoServiceClient {
	mock := &MockInfoServiceClient{ctrl: ctrl}
	mock.recorder = &MockInfoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoServiceClient) EXPECT() *MockInfoServiceClientMockRecorder {
	return m.recorder
}

// AddClusterInfo mocks base method.
func (m *MockInfoServiceClient) AddClusterInfo(arg0 context.Context, arg1 *pbgo.AddClusterInfoRequest, arg2 ...grpc.CallOption) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddClusterInfo", varargs...)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClusterInfo indicates an expected call of AddClusterInfo.
func (mr *MockInfoServiceClientMockRecorder) AddClusterInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterInfo", reflect.TypeOf((*MockInfoServiceClient)(nil).AddClusterInfo), varargs...)
}

// CreateCSPInfo mocks base method.
func (m *MockInfoServiceClient) CreateCSPInfo(arg0 context.Context, arg1 *pbgo.CreateCSPInfoRequest, arg2 ...grpc.CallOption) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCSPInfo", varargs...)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCSPInfo indicates an expected call of CreateCSPInfo.
func (mr *MockInfoServiceClientMockRecorder) CreateCSPInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSPInfo", reflect.TypeOf((*MockInfoServiceClient)(nil).CreateCSPInfo), varargs...)
}

// GetCSPAuth mocks base method.
func (m *MockInfoServiceClient) GetCSPAuth(arg0 context.Context, arg1 *pbgo.IDRequest, arg2 ...grpc.CallOption) (*pbgo.GetCSPAuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPAuth", varargs...)
	ret0, _ := ret[0].(*pbgo.GetCSPAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPAuth indicates an expected call of GetCSPAuth.
func (mr *MockInfoServiceClientMockRecorder) GetCSPAuth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPAuth", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCSPAuth), varargs...)
}

// GetCSPIDs mocks base method.
func (m *MockInfoServiceClient) GetCSPIDs(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPIDs", varargs...)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDs indicates an expected call of GetCSPIDs.
func (mr *MockInfoServiceClientMockRecorder) GetCSPIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDs", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCSPIDs), varargs...)
}

// GetCSPIDsByContractID mocks base method.
func (m *MockInfoServiceClient) GetCSPIDsByContractID(arg0 context.Context, arg1 *pbgo.IDRequest, arg2 ...grpc.CallOption) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPIDsByContractID", varargs...)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDsByContractID indicates an expected call of GetCSPIDsByContractID.
func (mr *MockInfoServiceClientMockRecorder) GetCSPIDsByContractID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDsByContractID", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCSPIDsByContractID), varargs...)
}

// GetCluster mocks base method.
func (m *MockInfoServiceClient) GetCluster(arg0 context.Context, arg1 *pbgo.GetClusterRequest, arg2 ...grpc.CallOption) (*pbgo.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*pbgo.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInfoServiceClientMockRecorder) GetCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCluster), varargs...)
}

// GetClusters mocks base method.
func (m *MockInfoServiceClient) GetClusters(arg0 context.Context, arg1 *pbgo.GetClustersRequest, arg2 ...grpc.CallOption) (*pbgo.GetClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusters", varargs...)
	ret0, _ := ret[0].(*pbgo.GetClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters.
func (mr *MockInfoServiceClientMockRecorder) GetClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockInfoServiceClient)(nil).GetClusters), varargs...)
}

// UpdateCSPInfo mocks base method.
func (m *MockInfoServiceClient) UpdateCSPInfo(arg0 context.Context, arg1 *pbgo.UpdateCSPInfoRequest, arg2 ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCSPInfo", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCSPInfo indicates an expected call of UpdateCSPInfo.
func (mr *MockInfoServiceClientMockRecorder) UpdateCSPInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSPInfo", reflect.TypeOf((*MockInfoServiceClient)(nil).UpdateCSPInfo), varargs...)
}

// UpdateClusterConf mocks base method.
func (m *MockInfoServiceClient) UpdateClusterConf(arg0 context.Context, arg1 *pbgo.UpdateClusterConfRequest, arg2 ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterConf", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConf indicates an expected call of UpdateClusterConf.
func (mr *MockInfoServiceClientMockRecorder) UpdateClusterConf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConf", reflect.TypeOf((*MockInfoServiceClient)(nil).UpdateClusterConf), varargs...)
}

// UpdateClusterStatus mocks base method.
func (m *MockInfoServiceClient) UpdateClusterStatus(arg0 context.Context, arg1 *pbgo.UpdateClusterStatusRequest, arg2 ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterStatus", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStatus indicates an expected call of UpdateClusterStatus.
func (mr *MockInfoServiceClientMockRecorder) UpdateClusterStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatus", reflect.TypeOf((*MockInfoServiceClient)(nil).UpdateClusterStatus), varargs...)
}

// ValidateLabelUniqueness mocks base method.
func (m *MockInfoServiceClient) ValidateLabelUniqueness(arg0 context.Context, arg1 *pbgo.ValidateLabelUniquenessRequest, arg2 ...grpc.CallOption) (*pbgo.ValidateLabelUniquenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateLabelUniqueness", varargs...)
	ret0, _ := ret[0].(*pbgo.ValidateLabelUniquenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateLabelUniqueness indicates an expected call of ValidateLabelUniqueness.
func (mr *MockInfoServiceClientMockRecorder) ValidateLabelUniqueness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLabelUniqueness", reflect.TypeOf((*MockInfoServiceClient)(nil).ValidateLabelUniqueness), varargs...)
}
