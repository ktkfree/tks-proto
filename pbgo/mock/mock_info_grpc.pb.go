// Code generated by MockGen. DO NOT EDIT.
// Source: pbgo/info_grpc.pb.go

// Package mock_pbgo is a generated GoMock package.
package mock_pbgo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pbgo "github.com/sktelecom/tks-proto/pbgo"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockInfoServiceClient is a mock of InfoServiceClient interface.
type MockInfoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfoServiceClientMockRecorder
}

// MockInfoServiceClientMockRecorder is the mock recorder for MockInfoServiceClient.
type MockInfoServiceClientMockRecorder struct {
	mock *MockInfoServiceClient
}

// NewMockInfoServiceClient creates a new mock instance.
func NewMockInfoServiceClient(ctrl *gomock.Controller) *MockInfoServiceClient {
	mock := &MockInfoServiceClient{ctrl: ctrl}
	mock.recorder = &MockInfoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoServiceClient) EXPECT() *MockInfoServiceClientMockRecorder {
	return m.recorder
}

// AddClusterInfo mocks base method.
func (m *MockInfoServiceClient) AddClusterInfo(ctx context.Context, in *pbgo.AddClusterInfoRequest, opts ...grpc.CallOption) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddClusterInfo", varargs...)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClusterInfo indicates an expected call of AddClusterInfo.
func (mr *MockInfoServiceClientMockRecorder) AddClusterInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterInfo", reflect.TypeOf((*MockInfoServiceClient)(nil).AddClusterInfo), varargs...)
}

// CreateCSPInfo mocks base method.
func (m *MockInfoServiceClient) CreateCSPInfo(ctx context.Context, in *pbgo.CreateCSPInfoRequest, opts ...grpc.CallOption) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCSPInfo", varargs...)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCSPInfo indicates an expected call of CreateCSPInfo.
func (mr *MockInfoServiceClientMockRecorder) CreateCSPInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSPInfo", reflect.TypeOf((*MockInfoServiceClient)(nil).CreateCSPInfo), varargs...)
}

// GetCSPAuth mocks base method.
func (m *MockInfoServiceClient) GetCSPAuth(ctx context.Context, in *pbgo.IDRequest, opts ...grpc.CallOption) (*pbgo.GetCSPAuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPAuth", varargs...)
	ret0, _ := ret[0].(*pbgo.GetCSPAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPAuth indicates an expected call of GetCSPAuth.
func (mr *MockInfoServiceClientMockRecorder) GetCSPAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPAuth", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCSPAuth), varargs...)
}

// GetCSPIDs mocks base method.
func (m *MockInfoServiceClient) GetCSPIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPIDs", varargs...)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDs indicates an expected call of GetCSPIDs.
func (mr *MockInfoServiceClientMockRecorder) GetCSPIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDs", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCSPIDs), varargs...)
}

// GetCSPIDsByContractID mocks base method.
func (m *MockInfoServiceClient) GetCSPIDsByContractID(ctx context.Context, in *pbgo.IDRequest, opts ...grpc.CallOption) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPIDsByContractID", varargs...)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDsByContractID indicates an expected call of GetCSPIDsByContractID.
func (mr *MockInfoServiceClientMockRecorder) GetCSPIDsByContractID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDsByContractID", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCSPIDsByContractID), varargs...)
}

// GetCluster mocks base method.
func (m *MockInfoServiceClient) GetCluster(ctx context.Context, in *pbgo.GetClusterRequest, opts ...grpc.CallOption) (*pbgo.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*pbgo.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInfoServiceClientMockRecorder) GetCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInfoServiceClient)(nil).GetCluster), varargs...)
}

// GetClusters mocks base method.
func (m *MockInfoServiceClient) GetClusters(ctx context.Context, in *pbgo.GetClustersRequest, opts ...grpc.CallOption) (*pbgo.GetClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusters", varargs...)
	ret0, _ := ret[0].(*pbgo.GetClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters.
func (mr *MockInfoServiceClientMockRecorder) GetClusters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockInfoServiceClient)(nil).GetClusters), varargs...)
}

// UpdateCSPInfo mocks base method.
func (m *MockInfoServiceClient) UpdateCSPInfo(ctx context.Context, in *pbgo.UpdateCSPInfoRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCSPInfo", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCSPInfo indicates an expected call of UpdateCSPInfo.
func (mr *MockInfoServiceClientMockRecorder) UpdateCSPInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSPInfo", reflect.TypeOf((*MockInfoServiceClient)(nil).UpdateCSPInfo), varargs...)
}

// UpdateClusterConf mocks base method.
func (m *MockInfoServiceClient) UpdateClusterConf(ctx context.Context, in *pbgo.UpdateClusterConfRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterConf", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConf indicates an expected call of UpdateClusterConf.
func (mr *MockInfoServiceClientMockRecorder) UpdateClusterConf(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConf", reflect.TypeOf((*MockInfoServiceClient)(nil).UpdateClusterConf), varargs...)
}

// UpdateClusterStatus mocks base method.
func (m *MockInfoServiceClient) UpdateClusterStatus(ctx context.Context, in *pbgo.UpdateClusterStatusRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterStatus", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStatus indicates an expected call of UpdateClusterStatus.
func (mr *MockInfoServiceClientMockRecorder) UpdateClusterStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatus", reflect.TypeOf((*MockInfoServiceClient)(nil).UpdateClusterStatus), varargs...)
}

// MockInfoServiceServer is a mock of InfoServiceServer interface.
type MockInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInfoServiceServerMockRecorder
}

// MockInfoServiceServerMockRecorder is the mock recorder for MockInfoServiceServer.
type MockInfoServiceServerMockRecorder struct {
	mock *MockInfoServiceServer
}

// NewMockInfoServiceServer creates a new mock instance.
func NewMockInfoServiceServer(ctrl *gomock.Controller) *MockInfoServiceServer {
	mock := &MockInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoServiceServer) EXPECT() *MockInfoServiceServerMockRecorder {
	return m.recorder
}

// AddClusterInfo mocks base method.
func (m *MockInfoServiceServer) AddClusterInfo(arg0 context.Context, arg1 *pbgo.AddClusterInfoRequest) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClusterInfo", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClusterInfo indicates an expected call of AddClusterInfo.
func (mr *MockInfoServiceServerMockRecorder) AddClusterInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterInfo", reflect.TypeOf((*MockInfoServiceServer)(nil).AddClusterInfo), arg0, arg1)
}

// CreateCSPInfo mocks base method.
func (m *MockInfoServiceServer) CreateCSPInfo(arg0 context.Context, arg1 *pbgo.CreateCSPInfoRequest) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCSPInfo", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCSPInfo indicates an expected call of CreateCSPInfo.
func (mr *MockInfoServiceServerMockRecorder) CreateCSPInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSPInfo", reflect.TypeOf((*MockInfoServiceServer)(nil).CreateCSPInfo), arg0, arg1)
}

// GetCSPAuth mocks base method.
func (m *MockInfoServiceServer) GetCSPAuth(arg0 context.Context, arg1 *pbgo.IDRequest) (*pbgo.GetCSPAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPAuth", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetCSPAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPAuth indicates an expected call of GetCSPAuth.
func (mr *MockInfoServiceServerMockRecorder) GetCSPAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPAuth", reflect.TypeOf((*MockInfoServiceServer)(nil).GetCSPAuth), arg0, arg1)
}

// GetCSPIDs mocks base method.
func (m *MockInfoServiceServer) GetCSPIDs(arg0 context.Context, arg1 *emptypb.Empty) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPIDs", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDs indicates an expected call of GetCSPIDs.
func (mr *MockInfoServiceServerMockRecorder) GetCSPIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDs", reflect.TypeOf((*MockInfoServiceServer)(nil).GetCSPIDs), arg0, arg1)
}

// GetCSPIDsByContractID mocks base method.
func (m *MockInfoServiceServer) GetCSPIDsByContractID(arg0 context.Context, arg1 *pbgo.IDRequest) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPIDsByContractID", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDsByContractID indicates an expected call of GetCSPIDsByContractID.
func (mr *MockInfoServiceServerMockRecorder) GetCSPIDsByContractID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDsByContractID", reflect.TypeOf((*MockInfoServiceServer)(nil).GetCSPIDsByContractID), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockInfoServiceServer) GetCluster(arg0 context.Context, arg1 *pbgo.GetClusterRequest) (*pbgo.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInfoServiceServerMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInfoServiceServer)(nil).GetCluster), arg0, arg1)
}

// GetClusters mocks base method.
func (m *MockInfoServiceServer) GetClusters(arg0 context.Context, arg1 *pbgo.GetClustersRequest) (*pbgo.GetClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusters", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters.
func (mr *MockInfoServiceServerMockRecorder) GetClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockInfoServiceServer)(nil).GetClusters), arg0, arg1)
}

// UpdateCSPInfo mocks base method.
func (m *MockInfoServiceServer) UpdateCSPInfo(arg0 context.Context, arg1 *pbgo.UpdateCSPInfoRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCSPInfo", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCSPInfo indicates an expected call of UpdateCSPInfo.
func (mr *MockInfoServiceServerMockRecorder) UpdateCSPInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSPInfo", reflect.TypeOf((*MockInfoServiceServer)(nil).UpdateCSPInfo), arg0, arg1)
}

// UpdateClusterConf mocks base method.
func (m *MockInfoServiceServer) UpdateClusterConf(arg0 context.Context, arg1 *pbgo.UpdateClusterConfRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterConf", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConf indicates an expected call of UpdateClusterConf.
func (mr *MockInfoServiceServerMockRecorder) UpdateClusterConf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConf", reflect.TypeOf((*MockInfoServiceServer)(nil).UpdateClusterConf), arg0, arg1)
}

// UpdateClusterStatus mocks base method.
func (m *MockInfoServiceServer) UpdateClusterStatus(arg0 context.Context, arg1 *pbgo.UpdateClusterStatusRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterStatus", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStatus indicates an expected call of UpdateClusterStatus.
func (mr *MockInfoServiceServerMockRecorder) UpdateClusterStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatus", reflect.TypeOf((*MockInfoServiceServer)(nil).UpdateClusterStatus), arg0, arg1)
}

// mustEmbedUnimplementedInfoServiceServer mocks base method.
func (m *MockInfoServiceServer) mustEmbedUnimplementedInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInfoServiceServer")
}

// mustEmbedUnimplementedInfoServiceServer indicates an expected call of mustEmbedUnimplementedInfoServiceServer.
func (mr *MockInfoServiceServerMockRecorder) mustEmbedUnimplementedInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInfoServiceServer", reflect.TypeOf((*MockInfoServiceServer)(nil).mustEmbedUnimplementedInfoServiceServer))
}

// MockUnsafeInfoServiceServer is a mock of UnsafeInfoServiceServer interface.
type MockUnsafeInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInfoServiceServerMockRecorder
}

// MockUnsafeInfoServiceServerMockRecorder is the mock recorder for MockUnsafeInfoServiceServer.
type MockUnsafeInfoServiceServerMockRecorder struct {
	mock *MockUnsafeInfoServiceServer
}

// NewMockUnsafeInfoServiceServer creates a new mock instance.
func NewMockUnsafeInfoServiceServer(ctrl *gomock.Controller) *MockUnsafeInfoServiceServer {
	mock := &MockUnsafeInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInfoServiceServer) EXPECT() *MockUnsafeInfoServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInfoServiceServer mocks base method.
func (m *MockUnsafeInfoServiceServer) mustEmbedUnimplementedInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInfoServiceServer")
}

// mustEmbedUnimplementedInfoServiceServer indicates an expected call of mustEmbedUnimplementedInfoServiceServer.
func (mr *MockUnsafeInfoServiceServerMockRecorder) mustEmbedUnimplementedInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInfoServiceServer", reflect.TypeOf((*MockUnsafeInfoServiceServer)(nil).mustEmbedUnimplementedInfoServiceServer))
}

// MockAppInfoServiceClient is a mock of AppInfoServiceClient interface.
type MockAppInfoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppInfoServiceClientMockRecorder
}

// MockAppInfoServiceClientMockRecorder is the mock recorder for MockAppInfoServiceClient.
type MockAppInfoServiceClientMockRecorder struct {
	mock *MockAppInfoServiceClient
}

// NewMockAppInfoServiceClient creates a new mock instance.
func NewMockAppInfoServiceClient(ctrl *gomock.Controller) *MockAppInfoServiceClient {
	mock := &MockAppInfoServiceClient{ctrl: ctrl}
	mock.recorder = &MockAppInfoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppInfoServiceClient) EXPECT() *MockAppInfoServiceClientMockRecorder {
	return m.recorder
}

// AddApp mocks base method.
func (m *MockAppInfoServiceClient) AddApp(ctx context.Context, in *pbgo.AddAppRequest, opts ...grpc.CallOption) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddApp", varargs...)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApp indicates an expected call of AddApp.
func (mr *MockAppInfoServiceClientMockRecorder) AddApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApp", reflect.TypeOf((*MockAppInfoServiceClient)(nil).AddApp), varargs...)
}

// DeleteApp mocks base method.
func (m *MockAppInfoServiceClient) DeleteApp(ctx context.Context, in *pbgo.DeleteAppRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApp", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockAppInfoServiceClientMockRecorder) DeleteApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockAppInfoServiceClient)(nil).DeleteApp), varargs...)
}

// GetAllAppsByClusterID mocks base method.
func (m *MockAppInfoServiceClient) GetAllAppsByClusterID(ctx context.Context, in *pbgo.IDRequest, opts ...grpc.CallOption) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllAppsByClusterID", varargs...)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAppsByClusterID indicates an expected call of GetAllAppsByClusterID.
func (mr *MockAppInfoServiceClientMockRecorder) GetAllAppsByClusterID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAppsByClusterID", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAllAppsByClusterID), varargs...)
}

// GetApp mocks base method.
func (m *MockAppInfoServiceClient) GetApp(ctx context.Context, in *pbgo.GetAppRequest, opts ...grpc.CallOption) (*pbgo.GetAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApp", varargs...)
	ret0, _ := ret[0].(*pbgo.GetAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockAppInfoServiceClientMockRecorder) GetApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetApp), varargs...)
}

// GetAppIDs mocks base method.
func (m *MockAppInfoServiceClient) GetAppIDs(ctx context.Context, in *pbgo.IDRequest, opts ...grpc.CallOption) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppIDs", varargs...)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppIDs indicates an expected call of GetAppIDs.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppIDs", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppIDs), varargs...)
}

// GetAppsByName mocks base method.
func (m *MockAppInfoServiceClient) GetAppsByName(ctx context.Context, in *pbgo.GetAppsRequest, opts ...grpc.CallOption) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppsByName", varargs...)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsByName indicates an expected call of GetAppsByName.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppsByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsByName", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppsByName), varargs...)
}

// GetAppsByType mocks base method.
func (m *MockAppInfoServiceClient) GetAppsByType(ctx context.Context, in *pbgo.GetAppsRequest, opts ...grpc.CallOption) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppsByType", varargs...)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsByType indicates an expected call of GetAppsByType.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppsByType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsByType", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppsByType), varargs...)
}

// UpdateApp mocks base method.
func (m *MockAppInfoServiceClient) UpdateApp(ctx context.Context, in *pbgo.UpdateAppRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApp", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockAppInfoServiceClientMockRecorder) UpdateApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAppInfoServiceClient)(nil).UpdateApp), varargs...)
}

// UpdateAppStatus mocks base method.
func (m *MockAppInfoServiceClient) UpdateAppStatus(ctx context.Context, in *pbgo.UpdateAppStatusRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppStatus", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppStatus indicates an expected call of UpdateAppStatus.
func (mr *MockAppInfoServiceClientMockRecorder) UpdateAppStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppStatus", reflect.TypeOf((*MockAppInfoServiceClient)(nil).UpdateAppStatus), varargs...)
}

// UpdateEndpoints mocks base method.
func (m *MockAppInfoServiceClient) UpdateEndpoints(ctx context.Context, in *pbgo.UpdateEndpointsRequest, opts ...grpc.CallOption) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEndpoints", varargs...)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpoints indicates an expected call of UpdateEndpoints.
func (mr *MockAppInfoServiceClientMockRecorder) UpdateEndpoints(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoints", reflect.TypeOf((*MockAppInfoServiceClient)(nil).UpdateEndpoints), varargs...)
}

// MockAppInfoServiceServer is a mock of AppInfoServiceServer interface.
type MockAppInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAppInfoServiceServerMockRecorder
}

// MockAppInfoServiceServerMockRecorder is the mock recorder for MockAppInfoServiceServer.
type MockAppInfoServiceServerMockRecorder struct {
	mock *MockAppInfoServiceServer
}

// NewMockAppInfoServiceServer creates a new mock instance.
func NewMockAppInfoServiceServer(ctrl *gomock.Controller) *MockAppInfoServiceServer {
	mock := &MockAppInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockAppInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppInfoServiceServer) EXPECT() *MockAppInfoServiceServerMockRecorder {
	return m.recorder
}

// AddApp mocks base method.
func (m *MockAppInfoServiceServer) AddApp(arg0 context.Context, arg1 *pbgo.AddAppRequest) (*pbgo.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApp", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApp indicates an expected call of AddApp.
func (mr *MockAppInfoServiceServerMockRecorder) AddApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApp", reflect.TypeOf((*MockAppInfoServiceServer)(nil).AddApp), arg0, arg1)
}

// DeleteApp mocks base method.
func (m *MockAppInfoServiceServer) DeleteApp(arg0 context.Context, arg1 *pbgo.DeleteAppRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockAppInfoServiceServerMockRecorder) DeleteApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockAppInfoServiceServer)(nil).DeleteApp), arg0, arg1)
}

// GetAllAppsByClusterID mocks base method.
func (m *MockAppInfoServiceServer) GetAllAppsByClusterID(arg0 context.Context, arg1 *pbgo.IDRequest) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAppsByClusterID", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAppsByClusterID indicates an expected call of GetAllAppsByClusterID.
func (mr *MockAppInfoServiceServerMockRecorder) GetAllAppsByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAppsByClusterID", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAllAppsByClusterID), arg0, arg1)
}

// GetApp mocks base method.
func (m *MockAppInfoServiceServer) GetApp(arg0 context.Context, arg1 *pbgo.GetAppRequest) (*pbgo.GetAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockAppInfoServiceServerMockRecorder) GetApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetApp), arg0, arg1)
}

// GetAppIDs mocks base method.
func (m *MockAppInfoServiceServer) GetAppIDs(arg0 context.Context, arg1 *pbgo.IDRequest) (*pbgo.IDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppIDs", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppIDs indicates an expected call of GetAppIDs.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppIDs", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppIDs), arg0, arg1)
}

// GetAppsByName mocks base method.
func (m *MockAppInfoServiceServer) GetAppsByName(arg0 context.Context, arg1 *pbgo.GetAppsRequest) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppsByName", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsByName indicates an expected call of GetAppsByName.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppsByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsByName", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppsByName), arg0, arg1)
}

// GetAppsByType mocks base method.
func (m *MockAppInfoServiceServer) GetAppsByType(arg0 context.Context, arg1 *pbgo.GetAppsRequest) (*pbgo.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppsByType", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsByType indicates an expected call of GetAppsByType.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsByType", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppsByType), arg0, arg1)
}

// UpdateApp mocks base method.
func (m *MockAppInfoServiceServer) UpdateApp(arg0 context.Context, arg1 *pbgo.UpdateAppRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockAppInfoServiceServerMockRecorder) UpdateApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAppInfoServiceServer)(nil).UpdateApp), arg0, arg1)
}

// UpdateAppStatus mocks base method.
func (m *MockAppInfoServiceServer) UpdateAppStatus(arg0 context.Context, arg1 *pbgo.UpdateAppStatusRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppStatus", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppStatus indicates an expected call of UpdateAppStatus.
func (mr *MockAppInfoServiceServerMockRecorder) UpdateAppStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppStatus", reflect.TypeOf((*MockAppInfoServiceServer)(nil).UpdateAppStatus), arg0, arg1)
}

// UpdateEndpoints mocks base method.
func (m *MockAppInfoServiceServer) UpdateEndpoints(arg0 context.Context, arg1 *pbgo.UpdateEndpointsRequest) (*pbgo.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpoints", arg0, arg1)
	ret0, _ := ret[0].(*pbgo.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpoints indicates an expected call of UpdateEndpoints.
func (mr *MockAppInfoServiceServerMockRecorder) UpdateEndpoints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoints", reflect.TypeOf((*MockAppInfoServiceServer)(nil).UpdateEndpoints), arg0, arg1)
}

// mustEmbedUnimplementedAppInfoServiceServer mocks base method.
func (m *MockAppInfoServiceServer) mustEmbedUnimplementedAppInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppInfoServiceServer")
}

// mustEmbedUnimplementedAppInfoServiceServer indicates an expected call of mustEmbedUnimplementedAppInfoServiceServer.
func (mr *MockAppInfoServiceServerMockRecorder) mustEmbedUnimplementedAppInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppInfoServiceServer", reflect.TypeOf((*MockAppInfoServiceServer)(nil).mustEmbedUnimplementedAppInfoServiceServer))
}

// MockUnsafeAppInfoServiceServer is a mock of UnsafeAppInfoServiceServer interface.
type MockUnsafeAppInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAppInfoServiceServerMockRecorder
}

// MockUnsafeAppInfoServiceServerMockRecorder is the mock recorder for MockUnsafeAppInfoServiceServer.
type MockUnsafeAppInfoServiceServerMockRecorder struct {
	mock *MockUnsafeAppInfoServiceServer
}

// NewMockUnsafeAppInfoServiceServer creates a new mock instance.
func NewMockUnsafeAppInfoServiceServer(ctrl *gomock.Controller) *MockUnsafeAppInfoServiceServer {
	mock := &MockUnsafeAppInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAppInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAppInfoServiceServer) EXPECT() *MockUnsafeAppInfoServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAppInfoServiceServer mocks base method.
func (m *MockUnsafeAppInfoServiceServer) mustEmbedUnimplementedAppInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppInfoServiceServer")
}

// mustEmbedUnimplementedAppInfoServiceServer indicates an expected call of mustEmbedUnimplementedAppInfoServiceServer.
func (mr *MockUnsafeAppInfoServiceServerMockRecorder) mustEmbedUnimplementedAppInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppInfoServiceServer", reflect.TypeOf((*MockUnsafeAppInfoServiceServer)(nil).mustEmbedUnimplementedAppInfoServiceServer))
}
