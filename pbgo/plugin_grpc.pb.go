// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pbgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	// StartDeployPlugin deploy a plugin
	StartDeployPlugin(ctx context.Context, in *StartDeployPluginRequest, opts ...grpc.CallOption) (*StartDeployPluginResponse, error)
	// StopDeployPlugin stop to deploy a plugin
	StopDeployPlugin(ctx context.Context, in *StopDeployPluginRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// GetPlugins returns a deployed plugins list
	GetPlugins(ctx context.Context, in *GetPluginsRequest, opts ...grpc.CallOption) (*GetPluginsResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) StartDeployPlugin(ctx context.Context, in *StartDeployPluginRequest, opts ...grpc.CallOption) (*StartDeployPluginResponse, error) {
	out := new(StartDeployPluginResponse)
	err := c.cc.Invoke(ctx, "/pbgo.PluginService/StartDeployPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) StopDeployPlugin(ctx context.Context, in *StopDeployPluginRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/pbgo.PluginService/StopDeployPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetPlugins(ctx context.Context, in *GetPluginsRequest, opts ...grpc.CallOption) (*GetPluginsResponse, error) {
	out := new(GetPluginsResponse)
	err := c.cc.Invoke(ctx, "/pbgo.PluginService/GetPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility
type PluginServiceServer interface {
	// StartDeployPlugin deploy a plugin
	StartDeployPlugin(context.Context, *StartDeployPluginRequest) (*StartDeployPluginResponse, error)
	// StopDeployPlugin stop to deploy a plugin
	StopDeployPlugin(context.Context, *StopDeployPluginRequest) (*SimpleResponse, error)
	// GetPlugins returns a deployed plugins list
	GetPlugins(context.Context, *GetPluginsRequest) (*GetPluginsResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) StartDeployPlugin(context.Context, *StartDeployPluginRequest) (*StartDeployPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDeployPlugin not implemented")
}
func (UnimplementedPluginServiceServer) StopDeployPlugin(context.Context, *StopDeployPluginRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDeployPlugin not implemented")
}
func (UnimplementedPluginServiceServer) GetPlugins(context.Context, *GetPluginsRequest) (*GetPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugins not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_StartDeployPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDeployPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).StartDeployPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbgo.PluginService/StartDeployPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).StartDeployPlugin(ctx, req.(*StartDeployPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_StopDeployPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDeployPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).StopDeployPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbgo.PluginService/StopDeployPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).StopDeployPlugin(ctx, req.(*StopDeployPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbgo.PluginService/GetPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetPlugins(ctx, req.(*GetPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbgo.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDeployPlugin",
			Handler:    _PluginService_StartDeployPlugin_Handler,
		},
		{
			MethodName: "StopDeployPlugin",
			Handler:    _PluginService_StopDeployPlugin_Handler,
		},
		{
			MethodName: "GetPlugins",
			Handler:    _PluginService_GetPlugins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
